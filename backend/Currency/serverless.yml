org: ${env:SLS_ORG}
service: currency-conversion-api

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 1024
  timeout: 29

  iam:
    role: ${env:AWS_ROLE_ARN}  # Asegúrate de que el rol tiene los permisos correctos

  environment:
    USER_CONVERSIONS_TABLE: ${self:provider.stage}-user-conversions
    USER_REPORTS_TABLE: ${self:provider.stage}-user-reports
    PROFILE_SERVICE_NAME: easychange-profile-api
    EXCHANGE_SERVICE_NAME: dev-exchange-rate-api  # Asegúrate de que esté definido correctamente
    CACHE_TTL_SECONDS: 3600
    SERVICE_NAME: disdb-auth-api
    STAGE: ${self:provider.stage}
    VALIDATE_TOKEN_FUNCTION: validateToken
    # Eliminamos EXCHANGE_API_URL y EXCHANGE_API_ACCESS_KEY, ya que ahora usamos Lambda

functions:
  convertCurrency:
    handler: convertCurrency.lambda_handler
    events:
      - http:
          path: convertCurrency
          method: post
          cors: true

  getCurrencyConversionByUserId:
    handler: getCurrencyConversionByUserId.lambda_handler
    events:
      - http:
          path: getCurrencyConversionByUserId
          method: get
          cors: true

  createReport:
    handler: createReport.lambda_handler
    events:
      - http:
          path: createReport
          method: post
          cors: true

  getReportsByUser:
    handler: getReportsByUser.lambda_handler
    events:
      - http:
          path: getReportsByUser
          method: get
          cors: true

  transferCurrency:
    handler: transferCurrency.lambda_handler
    events:
      - http:
          path: transferCurrency
          method: post
          cors: true

  # Agregamos la nueva función Lambda para obtener la tasa de cambio
  getExchangeRate:
    handler: exchangeRate.lambda_handler  # Este debe ser el nombre del archivo y la función Lambda
    events:
      - http:
          path: /exchange-rate/{from}/{to}
          method: get
          cors: true

resources:
  Resources:
    UserConversionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_CONVERSIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    UserReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_REPORTS_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: report_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: report_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
